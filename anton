#!/usr/bin/env perl
use strict;
use warnings;

our $SELFDEPS;

# bootstrapping...
#
# Do not load any modules before bootstrapping.
#
# Especially, I should not load List::Util.
# Some library requires latest List::Util.
BEGIN {
    $SELFDEPS = $ENV{ANTON_SELFDEPS} || 'anton/selfdeps';

    # mkdir -p anton/
    system("mkdir", "-p", $SELFDEPS)
        == 0 or die "ABORT\n";

    # Write cpanfile for bootstrapping deps.
    my $cpanfile = "${SELFDEPS}/cpanfile";
    open my $fh, '>', $cpanfile
        or die "$cpanfile: $!";
    print {$fh} join("\n",
        "requires 'File::pushd', '1.005';",
        "requires 'OrePAN2', '0.28';",
        "requires 'IO::File::AtomicChange', '0.05';",
        "requires 'Module::CPANfile', '1.0905';",
        "requires 'IO::Zlib', '0';",
    );
    close $fh;

    my @cmd = (
        'cpanm', '--quiet', '--dev', '--notest', '--no-man-pages',
        '-l', $SELFDEPS, '--cpanfile', $cpanfile, '--installdeps',
        '.',
    );
    system(@cmd) == 0 or die "Cannot install bootstrapping deps";

}
use File::Spec;
use lib File::Spec->rel2abs("${SELFDEPS}/lib/perl5/");
BEGIN {
    $ENV{PATH}=File::Spec->rel2abs("${SELFDEPS}/bin/") . ':' . $ENV{PATH};
    $ENV{PERL5LIB}=File::Spec->rel2abs("${SELFDEPS}/lib/perl5/") . ':' . $ENV{PERL5LIB};
}

# Find installed modules from local/
package CPAN::Installed::Local {
    use Config;
    use JSON::PP;
    use ExtUtils::MakeMaker;
    use File::Basename;
    use constant DEBUG => $ENV{CPAN_INSTALLED_LOCAL_DEBUG};

    sub new {
        my $class = shift;
        my %args = @_==1 ? %{$_[0]} : @_;
        unless (exists $args{directory}) {
            Carp::croak("Missing mandatory parameter: directory");
        }

        bless {
            %args,
        }, $class;
    }

    sub json_files {
        my $self = shift;
        sort glob("$self->{directory}/lib/perl5/$Config{archname}/.meta/*/install.json");
    }

    # Older cpanm doesn't ignore the PAUSE's default ignore files.
    #
    # ref. https://github.com/miyagawa/cpanminus/pull/358
    #
    # This is a workaround code.
    # I can remove this workaround after few years...
    sub cleanup_data {
        my $dat = shift;

        for my $key (keys %{$dat->{provides}}) {
            my $info = $dat->{provides}->{$key};
            next unless $info;
            next unless $info->{file};

            if ($info->{file} =~ qr!^(?:x?t|inc|local|perl5|fatlib)/!) {
                delete $dat->{provides}{$key};
            }
        }

        $dat;
    }

    sub load_json {
        my $fname = shift;

        open my $fh, '<', $fname
            or do {
            print "[anton] [WARN] Cannot open '$fname' for reading: $!\n";
            return;
        };

        my $json = do { local $/; <$fh> };
        return JSON::PP::decode_json($json);
    }

    sub aggregate {
        my ($self, $index) = @_;

        my @modules = (
            grep { cleanup_data($_) }
            grep { defined $_ }
            map { load_json($_) }
            $self->json_files
        );

        my @installed;
        my @uninstalled;

        for my $module (@modules) {
            if ($self->is_installed($module)) {
                push @installed, $module;
            } else {
                push @uninstalled, $module;
            }
        }

        return (\@installed, \@uninstalled);
    }

    sub is_installed {
        my ($self, $dat) = @_;

        # - All modules are installed.
        # - One or more modules are installed.
        # - If the file contains a correct package, ignore other package names.
        #   - Because inner package can't parse by EU::MM#parse_version

        my %file2pkgs;
        for my $package (keys %{$dat->{provides}}) {
            my $info = $dat->{provides}->{$package};
            $file2pkgs{$info->{file}}{$package} = $info->{version};
        }

        my $matched = 0;

        FILE_LOOP:
        while (my ($file, $info) = each %file2pkgs) {
            $file =~ s/\.PL\z//;

            for my $package (sort keys %$info) {
                my $version = $info->{$package};

                my $module = $package;
                $module =~ s!::!/!g;
                $module .= ".pm";

                if (index($module, File::Basename::basename($file)) < 0) {
                    DEBUG && warn "file name UNMATCHEd: $file, $module\n";
                    next;
                }

                for my $dir ("$self->{directory}/lib/perl5/", "$self->{directory}/lib/perl5/$Config{archname}/") {
                    my $path = "$dir/$module";
                    if (-f $path) {
                        my $version = MM->parse_version($path);
                        my $meta_version = $dat->{provides}{$package}{version};
                        next unless defined $version;
                        next unless defined $meta_version;

                        if (version->parse($version) == version->parse($meta_version)) {
                            $matched++;
                            next FILE_LOOP;
                        } else {
                            DEBUG && warn "DIFF $file $module!\n";
                            # Has different version
                            return 0;
                        }
                    }
                }
            }
        }
        return $matched ? 1 : 0;
    }
}
# /CPAN::Installed::Local

package Anton {
    use File::Spec;
    use File::Temp;
    use Module::CPANfile 1.0905;
    use IO::Zlib;
    use HTTP::Tiny;
    use Time::HiRes;

    sub new {
        my $class = shift;
        my %args = @_==1 ? %{$_[0]} : @_;
        bless {
            mirror => $ENV{ANTON_CPAN_MIRROR} || 'http://ftp.riken.jp/lang/CPAN/',
            local  => 'local',
            cpanfile => 'cpanfile',
            %args,
        }, $class;
    }

    sub cpanfile { shift->{cpanfile} }

    sub verbose { shift->{verbose} }

    sub local_mirror_dir {
        my $self = shift;
        File::Spec->rel2abs("anton/mirror/");
    }

    sub local_mirror_uri {
        my $self = shift;
        'file://' . $self->local_mirror_dir;
    }

    sub darkpan_uri {
        my $self = shift;
        'file://' . File::Spec->rel2abs('anton/darkpan');
    }

    sub index_file {
        File::Spec->rel2abs('anton/index.txt')
    }

    sub merged_index_file {
        File::Spec->rel2abs('anton/merged.txt')
    }

    sub cache_dir { shift->local_mirror_dir }

    sub install {
        my ($self, %args) = @_;

        unless (-f $self->cpanfile) {
            die "[anton] There is no cpanfile. Retried.\n";
        }

        $self->make_darkpan;

        # Make merged index.
        my @indexes = grep { -f $_ } (
            $self->index_file,
            $self->darkpan_index_file
        );
        $self->run_cmd(
            'orepan2-merge-index',
            '-o', $self->merged_index_file,
            @indexes,
        );

        # Download archive files, first.
        if (-f $self->index_file) {
            $self->download_archives;
        }

        # Install dependent modules, and update index file.
        my $t0 = [Time::HiRes::gettimeofday()];
        if ($args{deployment}) {
            unless (-f $self->index_file) {
                $self->croakf("You specified deployment mode. But there is no index file: %s", $self->index_file);
            }

            $self->run_cmd(
                "cpanm",
                '-L' => $self->{local},
                '--notest',
                '--no-man-pages',
                '--mirror' => $self->darkpan_uri,
                '--mirror' => $self->local_mirror_uri,
                '--mirror' => $self->{mirror},
                '--mirror' => 'http://backpan.perl.org/',
                '--mirror-index' => $self->merged_index_file,
                '--mirror-only',
                '--cpanfile' => $self->cpanfile,
                '--save-dists' => $self->cache_dir,
                ($self->verbose ? ('--verbose') : ()),
                '--installdeps' => '.'
            );
        } else {
            $self->run_cmd(
                "cpanm",
                '-L' => $self->{local},
                '--mirror' => $self->darkpan_uri,
                '--mirror' => $self->local_mirror_uri,
                '--mirror' => $self->{mirror},
                '--mirror' => 'http://backpan.perl.org/',
                '--mirror-index' => $self->merged_index_file,
                '--cascade-search',
                '--notest',
                '--no-man-pages',
                '--save-dists' => $self->cache_dir,
                '--cpanfile' => $self->cpanfile,
                ($self->verbose ? ('--verbose') : ()),
                '--installdeps' => '.'
            );

            $self->rebuild_index;
        }
        $self->infof("Spent %s seconds for installation", Time::HiRes::tv_interval($t0));
    }

    sub make_darkpan {
        my $self = shift;

        my @repos = $self->repos_from_cpanfile('cpanfile');
        return unless @repos;

        $self->run_cmd( 'orepan2-gc', 'anton/darkpan' );
        $self->run_cmd( 'orepan2-inject', '--cache', @repos, 'anton/darkpan' );
    }

    sub repos_from_cpanfile {
        my ($self, $filename) = @_;

        my $cpanfile = Module::CPANfile->load($filename);

        my @repos;
        for my $module ($cpanfile->prereqs->merged_requirements->required_modules) {
            my $opts = $cpanfile->options_for_module($module);
            if ($opts->{git}) {
                push @repos, $opts->{git} . '@' . $opts->{ref};
            }
        }
        return @repos;
    }

    sub atomic_write {
        my ($self, $filename, $content) = @_;

        $self->debugf("Writing ${filename}");
        File::Path::mkpath(File::Basename::dirname($filename));

        require IO::File::AtomicChange;
        my $fh = IO::File::AtomicChange->new($filename, 'w');
        $fh->print($content);
        $fh->close(); # MUST CALL close EXPLICITLY
    }

    sub parse_index {
        my ($self, $fname) = @_;

        my $fh = do {
            if ($fname =~ /\.gz\z/) {
                IO::Zlib->new($fname, 'r')
                    or die "gzip failed: $!\n";
            } else {
                open my $fh, '<', $fname
                    or Carp::croak("Cannot open '$fname' for reading: $!");
                $fh;
            }
        };

        # skip headers
        while (<$fh>) {
            last unless /\S/;
        }

        my %results;
        while (<$fh>) {
            if (/^(\S+)\s+(\S+)\s+(.*)$/) {
                $results{$1} = [$2 eq 'undef' ? undef : $2, $3];
            }
        }

        close $fh;

        return \%results;
    }

    sub download_archives {
        my ($self) = @_;

        my $main_index = -f $self->index_file ? $self->parse_index($self->index_file) : +{};
        my $dp_index = -f $self->darkpan_index_file ? $self->parse_index($self->darkpan_index_file) : +{};

        for my $pkg (keys %$dp_index) {
            delete $main_index->{$pkg};
        }

        my %seen;
        my %url_map = (
            map {
                ("$self->{mirror}authors/id/$_" => File::Spec->catfile($self->cache_dir, "authors/id/", $_))
            }
            grep { $_ !~ m{\AD/DU/DUMMY/} } # Remove darkpan files
            grep { !$seen{$_}++ }
            map { $_->[1] }
            values %$main_index
        );

        # Make it parallel?
        my $t0 = [Time::HiRes::gettimeofday()];
        my $ht = HTTP::Tiny->new();
        my $download_cnt = 0;
        for my $url (keys %url_map) {
            my $outfile = $url_map{$url};
            next if -f $outfile;

            File::Path::mkpath(File::Basename::dirname($outfile));
            $self->infof("Downloading %s to %s", $url, $outfile);
            my $response = $ht->mirror($url, $outfile);
            unless ( $response->{success} ) {
                $self->croakf("%s: %s %s", $url, $response->{status}, $response->{reason});
            }
            $download_cnt++;
        }
        $self->infof("Downloaded %s files in %s sec.", $download_cnt, Time::HiRes::tv_interval($t0));
    }

    sub uninstall {
        my ($self, %args) = @_;

        for my $module (@{$args{modules}}) {
            system("cpanm", "-L", $self->{local}, '-U', $module);
        }

        $self->rebuild_index;
    }

    sub darkpan_index_file { 'anton/darkpan/modules/02packages.details.txt.gz' }

    sub rebuild_index {
        my $self = shift;

        require OrePAN2::Index;
        my $index = OrePAN2::Index->new();

        my $snapshot = CPAN::Installed::Local->new(
            directory => $self->{local},
        );
        my ($installed, $uninstalled) = $snapshot->aggregate();

        my %ignore = (
            # Imager::File::PNG included in Imager-File-PNG-XXX.tar.gz and Imager-XXX.tar.gz. Very confusing.
            'Imager::File::JPEG' => 1,
            'Imager::File::PNG'  => 1,
        );

        for my $module (@$installed) {
            for my $pkg (sort keys %{$module->{provides}}) {
                next unless $module->{provides}{$pkg}{file};
                next if $ignore{$pkg};

                if ($index->lookup($pkg)) {
                    $self->croakf("${pkg} is already indexed.");
                }

                $index->add_index(
                    $pkg,
                    $module->{provides}->{$pkg}->{version},
                    $module->{pathname}
                );
            }
        }

        $self->debugf("Uninstalled: %s", join(' ', map { $_->{dist} } @$uninstalled));

        $self->atomic_write($self->index_file, $index->as_string({simple => 1}));
    }

    sub run_cmd {
        my ($self, @cmd) = @_;

        $self->infof("@cmd");
        if ($self->{dry_run}) {
            $self->infof("DRY RUN");
            return;
        }
        system(@cmd) == 0 or $self->croakf("Retired.");
    }

    sub write_gitignore_file {
        my $self = shift;

        my $filename = 'anton/.gitignore';
        unless (-f $filename) {
            $self->atomic_write(
                $filename,
                join("\n",
                    '/darkpan/',
                    '/mirror/',
                    '/selfdeps/',
                    '/merged.txt',
                )
            );
        }
    }

    my $colored = -t *STDOUT && eval "require Term::ANSIColor;1;" ? \&Term::ANSIColor::colored : sub { $_[1] };

    sub infof {
        my ($self, $fmt, @args) = @_;
        my $str = sprintf($fmt, @args);
        $str = $colored->(['blue'], $str);
        printf "[info] %s\n", $str;
    }

    sub croakf {
        my ($self, $fmt, @args) = @_;
        my $str = sprintf($fmt, @args);
        $str = $colored->(['red'], $str);
        Carp::croak(sprintf "[die] %s\n", $str);
    }

    sub warnf {
        my ($self, $fmt, @args) = @_;
        my $str = sprintf($fmt, @args);
        $str = $colored->(['yellow'], $str);
        printf "[warn] %s\n", $str;
    }

    sub debugf {
        my ($self, $fmt, @args) = @_;
        return unless $self->{debug};

        my $str = sprintf($fmt, @args);
        $str = $colored->(['green'], $str);
        printf "[debug] %s\n", $str;
    }
}

package Anton::CLI {
    use Pod::Usage;
    use Getopt::Long;
    use lib;
    use version;

    sub new {
        my ($class, $args) = @_;
        my $self = bless {
            args => $args,
        }, $class;
        $self->{anton} = $self->_build_anton();
        return $self;
    }

    sub anton { shift->{anton} }

    sub _build_anton {
        my $self = shift;

        my $p = Getopt::Long::Parser->new(
            config => [ "no_ignore_case", 'pass_through' ],
        );
        my $debug = $ENV{ANTON_DEBUG};
        my $local = 'local';
        $p->getoptionsfromarray(
            $self->{args},
            'dry-run!'    => \my $dry_run,
            'v|verbose!'  => \my $verbose,
            'debug!'      => \$debug,
            'local=s'     => \$local,
        );
        return Anton->new(
            dry_run => $dry_run,
            verbose => $verbose,
            debug   => $debug,
            local   => $local,
        );
    }

    sub run {
        my ($self) = @_;
        my $args = $self->{args};
        my $cmd = shift(@$args) || 'help';

        if ($self->can("CMD_${cmd}")) {
            $self->${\"CMD_${cmd}"}($args);
        } else {
            $self->CMD_help();
        }
    }

    sub CMD_help {
        pod2usage(1);
    }

    sub CMD_install {
        my ($self) = @_;

        my $deployment = 0;

        my $p = Getopt::Long::Parser->new( config => [ "no_ignore_case" ], );
        $p->getoptionsfromarray(
            $self->{args},
            "deployment!" => \$deployment,
        );

        $self->anton->write_gitignore_file;
        $self->{anton}->install(
            deployment => $deployment,
        );
    }

    sub CMD_index {
        my ($self, $args) = @_;

        $self->{anton}->rebuild_index();
    }

    sub CMD_uninstall {
        my ($self, $args) = @_;

        my $anton = Anton->new();
        $anton->uninstall(modules => $args);
    }
}

{
    my $cli = Anton::CLI->new(\@ARGV);
    $cli->run();
}


__END__

=head1 NAME

anton - Yet another CPAN module manager for web applications.

=head1 SYNOPSIS

    > anton install

    > anton uninstall Acme::YakiniQ

=head1 DEVELOPMENT STATUS

Unstable.

=head1 DESCRIPTION

Yet another CPAN module manager for web applications.

=head1 USAGE

=head2 At first time.

You need to write the cpanfile, first.

Then, you run following command:

    > anton install

cpanm installs all dependent modules.

Anton generates anton/modules/02packages.details.txt from local/lib/perl5/*/.meta/*/install.json.
It contains installed module's version information.

You can restore local/ from anton/index.txt.

=head2 Restore local/ from anton/index.txt

You can generate original environment's local/ from anton/index.txt.

    > anton install --deployment

This command install all modules described in anton/index.txt.

If all restoration is succeeded, exit status is 0.
If anton gets an error, exit status is non-zero value.

=head1 Directory structure

    - cpanfile
    + anton
        - index.txt (You must add this file to repository)
        - merged.txt (temporary file)
        + darkpan
            + authors
            + dists
        + mirror (cache directory)

=head1 Environment variables

=over 4

=item ANTON_SELFDEPS

Path to selfdeps. anton installs dependent libraries to this directory.

(Default: anton/selfdeps)

=back

=head1 Paralelize in Anton

Anton supports parallelization.

For now, Anton do parallel download first.

=head1 FAQ

=head2 Is there an `carton exec` equivalent command?

There is no `carton exec` equivalent subcommand.
But you can do `perl -Mlib::core::only -Mlib=lib/perl5/ foo.pl`.

=head1 LICENSE

Copyright (C) Tokuhiro Matsuno.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 AUTHOR

Tokuhiro Matsuno E<lt>tokuhirom@gmail.comE<gt>

